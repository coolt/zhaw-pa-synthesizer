--------------------------------------------------
-- Top level Synthesizer 
--
-- tone-input comes from midi-keyboard
-- key can be parallel read out by block polyphonie
-- tone is in build generated by dds and frequencemodulation
-- extern audio codec recives tones trough i2s and gives tone out
-- audio codec is controlled by setting registers trough i2c
--
-- Key 0: Reset
--------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;


entity top_level is
	port (	CLOCK_50				:in			std_logic;
			KEY						:in			std_logic_vector(3 downto 0);		
			SW						:in			std_logic_vector(17 downto 0);		
			AUD_ADCDAT				:in			std_logic;							--SD vom Coded DA Wandlung
			AUD_DACDAT				:out		std_logic;							--SD zum Codec AD Wandlung
            
			AUD_BCLK				:out		std_logic;							--I2S Bit Clock
			AUD_XCK					:out		std_logic;							--Master Clock
			AUD_DACLRCK				:out		std_logic;
			AUD_ADCLRCK				:out		std_logic;							--WS zum Codec bei AD Wandlung
			I2C_SCLK				:out		std_logic;
			I2C_SDAT				:inout		std_logic		
		  );
end top_level;



architecture rtl of top_level is

signal		tl_write_done:			std_logic;										--Sendebestätigung vom I2C Master
signal		tl_ack_error:			std_logic;										--Senden fehlgeschlagen von I2C Master
signal		tl_write:		  		std_logic;
signal		tl_write_data:			std_logic_vector (15 downto 0);					--I2C Sendedaten

signal		tl_clk_12M:				std_logic;										--Masterclock 12MHz
signal		tl_sw_button:			std_logic_vector (17 downto 0);					--synchronisierte Schalter
signal		tl_key:					std_logic_vector (2 downto 0);					--synchronisierte Taster
signal		tl_DACDAT_pl:			std_logic_vector (15 downto 0);					
signal		tl_DACDAT_pr:			std_logic_vector (15 downto 0);				
signal		tl_ADCDAT_pl:			std_logic_vector (15 downto 0);
signal		tl_ADCDAT_pr:			std_logic_vector (15 downto 0);
signal		tl_WS:					std_logic;

								
signal		tl_tone_on:				std_logic; 										--fuer fm_synth 
signal		tl_n_cum:				natural range 0 to 65000;						--Tonhöhe 
signal		tl_strobe:				std_logic;
signal		tl_dacdat_g_o:			std_logic_vector(15 downto 0);
signal 		tl_bclk:				std_logic;										--halbierter 12MHz Takt
signal		tl_fm_ratio:			natural range 0 to 10;							--Synthesizer Verhältnis						
signal		tl_fm_depth:			natural range 0 to 10;							--Synthesizer Tiefe


--------------------------------------------------
-- Component declaration
--------------------------------------------------
component set_audio_register
	port (	clk,reset_n	 			 		:in      		std_logic;
			write_done_i, ack_error_i   	:in      		std_logic;
			write_o     					:out   			std_logic;
			write_data_o				 	:out			std_logic_vector (15 downto 0)						
    	  );
end component;


component i2c_master
	port (	clk         				 	:in    			std_logic;
			reset_n     				 	:in   			std_logic;
			write_i     				 	:in     		std_logic;
			write_data_i					:in				std_logic_vector(15 downto 0);
			sda_io							:inout			std_logic;
			scl_o							:out   			std_logic;
			write_done_o			    	:out			std_logic;
			ack_error_o						:out			std_logic
          );
end component;


component infrastructure_block
	port(   s_reset_n						:in    			std_logic;
			clk_50M          				:in    			std_logic;
			button							:in 			std_logic_vector(17 downto 0);
			key_in							:in				std_logic_vector(2 downto 0);
    	    clk_12M                    	 	:out   			std_logic;
		    button_sync						:out 			std_logic_vector(17 downto 0);
			key_sync						:out			std_logic_vector(2 downto 0)
			);
end component;


component i2s_master
	port (	clk_12M							:in				std_logic;
			i2s_reset_n						:in				std_logic;
			--ADCDAT_s						:in				std_logic;
			DACDAT_pl						:in				std_logic_vector(15 downto 0);
			DACDAT_pr						:in				std_logic_vector(15 downto 0);
			STROBE_O						:out			std_logic;	
			BCLK							:out			std_logic;
			DACDAT_s						:out			std_logic;
			--ADCDAT_pl						:out			std_logic_vector(15 downto 0);
			--ADCDAT_pr						:out			std_logic_vector(15 downto 0);
			WS								:out			std_logic
			
		 );					
end component;


component link_audio_data
	port (	--DCDAT_pl_i						:in 			std_logic_vector (15 downto 0);
			--ADCDAT_pr_i						:in 			std_logic_vector (15 downto 0);
			DACDAT_pl_o						:out			std_logic_vector (15 downto 0);
			DACDAT_pr_o						:out			std_logic_vector (15 downto 0);
			dds_DATA_I						:in				std_logic_vector (15 downto 0)
		 );
end component;


component tone_decoder
	port (	clk								:in				std_logic;	--clk_12M
			reset_n							:in				std_logic;
			tone_cmd						:in				std_logic_vector(13 downto 0);
			tone_on_o						:out			std_logic;
			musik_start						:in				std_logic;
			N_CUM							:out 			natural range 0 to 65000
		);
end component;



component fm_synth
port (		fm_clk_12M						:in				std_logic;
			fm_reset_n						:in				std_logic;
			fm_bclk							:in				std_logic;
			strobe							:in				std_logic;
			tone_on_i						:in				std_logic;
			N_CUM							:in				natural range 0 to 65000;
			synth_ratio						:in				natural range 0 to 1000;
			synth_depth						:in				natural range 0 to 10;
			data_o							:out			std_logic_vector(15 downto 0)
		  );
end component;


--------------------------------------------------
-- Begin architecture
-- Component instantiation
--------------------------------------------------
begin

inst_1 : set_audio_register
	port map ( 	write_done_i    	=> 		tl_write_done,						
				ack_error_i 	   	=> 		tl_ack_error,
				write_o				=>		tl_write,
				write_data_o	  	=>		tl_write_data,				
				clk					=>		tl_clk_12M,
				reset_n				=>		KEY(0)				
			  );
			  
inst_2 : i2c_master
	port map ( 	write_i				=>		tl_write,							
				write_data_i		=>		tl_write_data,
				sda_io				=>		I2C_SDAT,
				scl_o			    =>		I2C_SCLK,
				write_done_o		=>		tl_write_done,
				ack_error_o			=>		tl_ack_error,
				clk					=>		tl_clk_12M,
				reset_n				=>		KEY(0)
			   );
			  
inst_3 : infrastructure_block						
	port map ( 	s_reset_n			=> 		KEY(0),
				clk_50M				=>		CLOCK_50,
				button				=>		SW,
				key_in				=>		KEY(3 downto 1),
				clk_12M				=>		tl_clk_12M,
				button_sync			=>		tl_sw_button,
				key_sync			=>		tl_key
				);

inst_4: i2s_master
	port map (	clk_12M				=>		tl_clk_12M,
				i2s_reset_n			=>		KEY(0),
				--ADCDAT_s			=>		AUD_ADCDAT,
				DACDAT_pl			=>		tl_DACDAT_pl,
				DACDAT_pr			=>		tl_DACDAT_pr,
				STROBE_O			=> 		tl_strobe,
				BCLK				=>		tl_bclk,
				DACDAT_s			=>		AUD_DACDAT,
				--ADCDAT_pl			=>		tl_ADCDAT_pl,
				--ADCDAT_pr			=>		tl_ADCDAT_pr,
				WS					=>		tl_WS
				);
				
inst_5 : link_audio_data
	port map (	--ADCDAT_pl_i			=>		tl_ADCDAT_pl,
				--ADCDAT_pr_i			=>		tl_ADCDAT_pr,
				DACDAT_pl_o			=>		tl_DACDAT_pl,
				DACDAT_pr_o			=>		tl_DACDAT_pr,
				dds_DATA_I			=>		tl_dacdat_g_o
				
				);

inst_6: tone_decoder
	port map(	clk					=>		tl_clk_12M,
				reset_n				=>		KEY(0),
				tone_cmd			=>		tl_sw_button(13 downto 0),
				tone_on_o			=>		tl_tone_on,
				musik_start			=>		tl_key(2),
				N_CUM				=>		tl_n_cum
		);

	
inst_7: fm_synth
	port map(	fm_clk_12M	 		=> 		tl_clk_12M,	
				fm_reset_n			=> 		KEY(0),		
				fm_bclk				=> 		tl_bclk,
				strobe				=> 		tl_strobe, 
				tone_on_i			=> 		tl_tone_on,
				N_CUM				=> 		tl_n_cum,
				synth_ratio			=> 		tl_fm_ratio,
				synth_depth			=> 		tl_fm_depth,
				data_o				=> 		tl_dacdat_g_o
		  );

--------------------------------------------------
-- Assign signals
--------------------------------------------------	
--AUD_ADCLRCK <= 	tl_WS;
AUD_DACLRCK	<= 	tl_WS;
AUD_XCK		<=	tl_clk_12M;
AUD_BCLK	<=	tl_bclk;
	
			  
end architecture rtl;