----------------------------------------------------------------
-- Clock generator
--
-- Clock 12 MHZ is generated by a modulo division
-- Clock  6 MHz is a clock_divider
--
-- Clock 12 MHz is needed for the System
-- Clock  6 MHz for I2S Communication
----------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;


entity clock_generator is
  port(   s_reset_n					:in    	std_logic;
			clk_50M          			:in    	std_logic;			
    	    clk_12M                     :out   	std_logic;
		    clk_6M						:out    std_logic
    	);
end clock_generator;


architecture rtl of clock_generator is

signal  s_reset			:  		std_logic; 
signal 	s_clk_12M		: 		std_logic;
signal 	s_clk_6M		: 		std_logic;

----------------------------------------------------------------
-- Components declaration
----------------------------------------------------------------

component modulo_divider
generic (width		: positive  := 5 );
  port( clk_system	: in    std_logic;
    	clk_12M     : out   std_logic
    	);
end component;




begin
----------------------------------------------------------------
-- Components instantiation
---------------------------------------------------------------- 
 divider_inst : modulo_divider
generic map (width =>	4)
port map (  clk_system		=> 		clk_50M,
			clk_div	 		=>	 	s_clk_12M
			);


-- Clock generates by a process 
-- no instance itself
			
clk_half_freq: process (all)
    begin	
        if reset_n = '0'then
                s_clk_6M <= '0';
        elsif s_clk_12M'event AND s_clk_12M = '1' then
                s_clk_6M <= NOT s_clk_6M;
        end if;	
    end process;		
 
  
  -- Permanent connections
  -----------------------------------------
  clk_6M <= s_clk_6M; 
  clk_12M <= s_clk_12M; 
  s_reset <= NOT s_reset_n;
  
 -- end architecture 
------------------------------------------- 
end rtl;